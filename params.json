{
  "name": "Ap lab",
  "tagline": "Lab6",
  "body": "package my_package;\r\n\r\n//various imports\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.net.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\n\r\n\r\n//the crawler class\r\npublic class Crawler implements Runnable {\r\n\r\n\tprivate Thread t;\r\n\tprivate String threadName;\r\n\t//Since we have to use at least 3 threads I divide the total files into 3 queues one for each thread\r\n\tstatic Queue path_queue1= new LinkedList();\r\n\tstatic Queue path_queue2= new LinkedList();\r\n\tstatic Queue path_queue3= new LinkedList();\r\n\tstatic Queue name_queue1= new LinkedList();\r\n\tstatic Queue name_queue2= new LinkedList();\r\n\tstatic Queue name_queue3= new LinkedList();\r\n\t\r\n\tpublic static Map<String, String> file_content=new HashMap<String, String>();\r\n\tpublic static List<String> file_names = new ArrayList<>(); //stores list of all file names\r\n\tpublic static List<String> file_paths = new ArrayList<>(); //stores list of all file paths\r\n\t\r\n\t\r\n\t\r\n\t//function used to get file names and paths\r\n\tpublic static void GetFileDetails(final File folder) {\t\r\n\t\tfor (final File fileEntry : folder.listFiles()) {\r\n\t        if (fileEntry.isDirectory()) {\r\n\t        \tGetFileDetails(fileEntry);\r\n\t        } else {\r\n\t            file_names.add(fileEntry.getName());\r\n\t            file_paths.add(fileEntry.getAbsolutePath());\r\n\t            \r\n\t        }\r\n\t    }\r\n\t}\r\n\t\r\n\t\r\n\t//function used to get content of files\r\n\tpublic static String GetFileContent(String filepath) {\r\n\t\tString my_string;\r\n        File file = new File(filepath);\r\n        StringBuilder builder = new StringBuilder();\r\n        if (!file.exists()) {\r\n            throw new RuntimeException(\"File not found\");\r\n        }\r\n        BufferedReader reader = null;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(file));\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                builder.append(line);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (reader != null) {\r\n                try {\r\n                    reader.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        \r\n        my_string=builder.toString();\r\n        return my_string;\r\n\t\t \r\n\t}\r\n\t\r\n\r\n    //create a crawler class instance with the given string as the thread name\r\n\tCrawler(String name){\r\n\t\tthreadName =name;\r\n\t\tSystem.out.println(\"Creating\"+ threadName);\r\n\t}\r\n\t\t\r\n\t\r\n\r\n\t//run method that calls the run thread function\r\n\tpublic void run(){\r\n\t\tSystem.out.println(\"Running\"+ threadName);\r\n\t\trun_thread();\r\n\t\t\t\r\n\t}\r\n\r\n\t\r\n\t//execute the thread\r\n\tprivate synchronized void run_thread(){\r\n\t\t  \r\n\t    try {\r\n\t    \r\n\t    \tFile my_file;\r\n\t    \tdouble bytes;\r\n\t    \tdouble kilobytes;\r\n\t    \tString my_string;\r\n\t\t\tScanner in = new Scanner(System.in);\r\n\t\t\t\r\n\t\t\tif(threadName==\"Thread-1\"){\r\n\t\t\t\twhile(name_queue1.size()!=0){\r\n\t\t\t\tmy_file=new File((String) path_queue1.element());\r\n\t\t\t\tbytes = my_file.length();\r\n\t\t\t\tkilobytes = (bytes / 1024);\r\n\t\t\t\tBufferedWriter b1= new BufferedWriter(new FileWriter(\"E:/Index.txt\",true));\r\n\t\t\t\tb1.write(\"\"+name_queue1.element()+\"\\t\" + path_queue1.element()+\"\\t\\t\"+bytes+\" bytes\");\r\n\t\t\t\tb1.newLine();\r\n\t\t\t\tb1.close();\r\n\t\t\t\tname_queue1.remove();\r\n\t\t\t\tpath_queue1.remove();}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Enter a string to search\");\r\n\t\t\t    my_string = in.nextLine();\r\n\t\t\t    \r\n\t\t\t\t File a_file;\r\n\t\t\t\t String a_name;\r\n\t\t\t\t \r\n\t\t\t\t \r\n\t\t\t\t//store content of file in file_content\r\n\t\t\t\tfor (String x : file_paths) {\r\n\t\t\t\t\t a_file = new File(x);\r\n\t\t\t\t\t a_name=a_file.getName();\r\n\t\t\t\t\tfile_content.put(a_name,GetFileContent(x));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t//return file names which contain the string\r\n\t\t\t\tfor (Map.Entry<String, String> entry : file_content.entrySet())\r\n\t\t\t\t{\r\n\t\t\t\t\t if(entry.getValue().toLowerCase().contains(my_string.toLowerCase())){\r\n\t\t\t\t\t   System.out.println(\"String Found in File: \"+entry.getKey());}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(threadName==\"Thread-2\"){\r\n\t\t\t\twhile(name_queue2.size()!=0){\r\n\t\t\t\t//System.out.println(\"\"+name_queue2.element()+\"\\t\" + path_queue2.element());\t\r\n\t\t\t\tmy_file=new File((String) path_queue2.element());\r\n\t\t\t\tbytes = my_file.length();\r\n\t\t\t\tkilobytes = (bytes / 1024);\r\n\t\t\t\tBufferedWriter b2= new BufferedWriter(new FileWriter(\"E:/Index.txt\",true));\r\n\t\t\t\tb2.write(\"\"+name_queue2.element()+\"\\t\" + path_queue2.element()+\"\\t\\t\"+bytes+\" bytes\");\r\n\t\t\t\tb2.newLine();\r\n\t\t\t\tb2.close();\r\n\t\t\t\tname_queue2.remove();\r\n\t\t\t\tpath_queue2.remove();}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(threadName==\"Thread-3\"){\r\n\t\t\t\twhile(name_queue3.size()!=0){\r\n\t\t\t\t//System.out.println(\"\"+name_queue3.element()+\"\\t\" + path_queue3.element());\t\r\n\t\t\t\tmy_file=new File((String) path_queue3.element());\r\n\t\t\t\tbytes = my_file.length();\r\n\t\t\t\tkilobytes = (bytes / 1024);\r\n\t\t\t\tBufferedWriter b3= new BufferedWriter(new FileWriter(\"E:/Index.txt\",true));\r\n\t\t\t\tb3.write(\"\"+name_queue3.element()+\"\\t\" + path_queue3.element()+\"\\t\\t\"+bytes+\" bytes\");\r\n\t\t\t\tb3.newLine();\r\n\t\t\t\tb3.close();\r\n\t\t\t\tname_queue3.remove();\r\n\t\t\t\tpath_queue3.remove();}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Thread 3 is sleeping till Thread 1 returns search result(max is 30 seconds)\");\r\n\t\t\t\tThread.sleep(30000);\r\n\t\t\t\tSystem.out.println(\"Enter a string to search again\");\r\n\t\t\t    my_string = in.nextLine();\r\n\t\t\t\t\r\n\t\t\t\t File b_file;\r\n\t\t\t\t String b_name;\r\n\t\t\t\t \r\n\t\t\t\t \r\n\t\t\t\t//store content of file in file_content\r\n\t\t\t\tfor (String x : file_paths) {\r\n\t\t\t\t\t b_file = new File(x);\r\n\t\t\t\t\t b_name=b_file.getName();\r\n\t\t\t\t\tfile_content.put(b_name,GetFileContent(x));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t//return file names which contain the string\r\n\t\t\t\tfor (Map.Entry<String, String> entry : file_content.entrySet())\r\n\t\t\t\t{\r\n\t\t\t\t\t if(entry.getValue().toLowerCase().contains(my_string.toLowerCase())){\r\n\t\t\t\t\t   System.out.println(\"String Found in File: \"+entry.getKey());}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t    \r\n\t    \r\n\t    \r\n\t    \r\n\t    \r\n\t    } catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tpublic void start ()\r\n\t   {\r\n\t      System.out.println(\"Starting \" +  threadName );\r\n\t      if (t == null)\r\n\t      {\r\n\t         t = new Thread (this, threadName);\r\n\t         t.start ();\r\n\t      }\r\n\t   }\r\n\t\r\n\t\r\n\t\tpublic static void main(String [ ] args){\r\n\t\t\r\n\t\t\t\r\n\t\t\tString my_string2;\r\n\t\t\tScanner in2 = new Scanner(System.in);\r\n\t\t\tSystem.out.println(\"Please enter the path of root directory you want to start crawling from:\");\r\n\t\t\tSystem.out.println(\"(Note!!! use / symbol  and directory cant be root of partition)\");\r\n\t\t    my_string2 = in2.nextLine();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfinal File folder = new File(my_string2);\r\n\t\t\tGetFileDetails(folder);\r\n\t\t\t\t\r\n\t\t\tfloat total_size=file_paths.size();\r\n\t\t\tint division=(int)Math.ceil(total_size/3);\r\n\t\t\t\r\n\t\t\t \r\n\t\t\tint x;\r\n\t\t\tfor (x=0;x<division;x++) {\r\n\t\t\t\tpath_queue1.add(file_paths.get(x));\r\n\t\t\t\tname_queue1.add(file_names.get(x));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (;x<division+division;x++) {\r\n\t\t\t\tpath_queue2.add(file_paths.get(x));\r\n\t\t\t\tname_queue2.add(file_names.get(x));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (;x<total_size;x++) {\r\n\t\t\t\tpath_queue3.add(file_paths.get(x));\r\n\t\t\t\tname_queue3.add(file_names.get(x));\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tCrawler c1= new Crawler(\"Thread-1\");\r\n\t\t\tc1.start();\r\n\t\t\t\r\n\t\t\tCrawler c2= new Crawler(\"Thread-2\");\r\n\t\t\tc2.start();\r\n\t\t\t\r\n\t\t\tCrawler c3= new Crawler(\"Thread-3\");\r\n\t\t\tc3.start();\r\n\t}\r\n\t\r\n}\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}